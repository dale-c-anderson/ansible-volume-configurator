---
- name: Gather nvme vendor device info
  shell: > 
    /sbin/nvme id-ctrl -v "{{ nvme_device }}"
  register: nvme_info_result

- name: debug nvme_info_result
  debug:
    var: nvme_info_result
    verbosity: 1

- name: Extract volume ID from nvme_info_result (shows up as serial number)
  shell: echo "{{ nvme_info_result.stdout }}" | grep '^sn' | awk '{print $3}' | sed s'/vol/vol-/'
  register: nvme_volume_id_result

- name: debug nvme_volume_id_result
  debug:
    var: nvme_volume_id_result
    verbosity: 1

- set_fact:
    nvme_volume_id: "{{ nvme_volume_id_result.stdout }}"

- debug:
    var: nvme_volume_id

- name: Extract the device name from NVME vendor info.
  shell: echo "{{ nvme_info_result.stdout }}" | grep '^0000' | grep -o 'sd.'
  register: nvme_external_block_device_name_result

- name: debug nvme_external_block_device_name_result
  debug:
    var: nvme_external_block_device_name_result
    verbosity: 1

- set_fact:
    nvme_external_block_device_name: "/dev/{{ nvme_external_block_device_name_result.stdout }}"

- debug:
    var: nvme_external_block_device_name

- debug:
    var: secondary_volumes

- name: Select the corresponding ebs block device metadata, so we can read on its tags
  set_fact:
    volume: "{{ secondary_volumes | selectattr('device_name', 'equalto', nvme_external_block_device_name) | list }}"
    os_device: "{{ nvme_device }}"

- name: Now we can resume the regular configure_volume.yml playbook
  include_tasks: configure_volume.yml
  vars:
    volume: "{{ volume[0] }}"
