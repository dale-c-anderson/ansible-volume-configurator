---
- name: Debug volume object
  debug:
      var: volume

- name: Get tag data out of the volume blob
  set_fact:
    tags: "{{ volume.tags }}"

- name: Debug tags
  debug:
      var: tags

- name: Set some variables
  set_fact:
    hypervisor_device: "{{ volume.attachment_set.device }}"
    fstype: "{{ tags.fstype | default('xfs') }}"
    mount_point: "{{ tags.FileSystem }}"

- assert:
    that:
      - mount_point != '/'
      - mount_point != '/root'
      - mount_point != '/boot'
      - mount_point != ''

- name: Stat the hypervisor_device
  ansible.builtin.stat:
      path: "{{ hypervisor_device }}"
  register: hyp_dev_stat_result

- name: Debug hyp_dev_stat_result
  debug:
    var: hyp_dev_stat_result

- name: Make Sure the specified hypervisor_device exists (its probably a symlink)
  assert:
    that:
      - hyp_dev_stat_result.stat.exists

- name: Translate the hypervisor device name to the OS device name when the hypervisor device is a symlink
  set_fact:
    os_device: "{{ hyp_dev_stat_result.stat.lnk_source }}"
  when: hyp_dev_stat_result.stat.islnk

- name: Use the hypervisor device name as the OS device name when the hypervisor device is not a symlink
  set_fact:
    os_device: "{{ hypervisor_device }}"
  when: not hyp_dev_stat_result.stat.islnk

- name: Make Sure we are not about to mess with root volume
  assert:
    that:
      - os_device not in ["/dev/xvda", "/dev/nvme0n1", "/dev/sda"]

- name: Format the filesystem. Note that since this is a secondary volume, we don't actually need to create a partition first.
  filesystem:
    dev: "{{ os_device }}"
    fstype: "{{ fstype }}"
    resizefs: yes
    force: no  # Don't re-format if the filesystem already exists.

- name: define uuid_cmd
  set_fact:
    uuid_cmd: "/sbin/blkid {{ os_device }} --output value --match-tag UUID"

- name: debug uuid_cmd
  ansible.builtin.debug:
      var: uuid_cmd

- name: Get UUID of the filesystem
  ansible.builtin.command: "{{ uuid_cmd }}"
  register: uuid_result
  changed_when: False  # This command isn't changing anything, so don't ever report it as changed

- name: debug uuid_result
  ansible.builtin.debug:
    var: uuid_result

- set_fact:
    filesystem_uuid: "{{ uuid_result.stdout_lines[0]|trim() }}"

- debug:
    var: filesystem_uuid

- assert:
    that:
      - (filesystem_uuid | length) == 36

- name: Check if the mount point exists
  ansible.builtin.stat:
    path: "{{ mount_point }}"
  register: mount_point_stat_result

- name: Create the mount point if it doesn't exist
  file:
    path: "{{ mount_point }}"
    state: directory
    mode: 0755
    recurse: True
  when: not mount_point_stat_result.stat.exists

- name: Mount the new filesystem now and create a fstab entry so it will be mounted on boot
  mount:
    path: "{{ mount_point }}"
    src: UUID={{ filesystem_uuid }}
    state: mounted
    fstype: "{{ fstype }}"
    opts: defaults,nofail
    dump: 0
